image:
  name: hashicorp/terraform:light
  entrypoint:
    - "/usr/bin/env"
    - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    - "AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}"

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: $CI_PIPELINE_SOURCE == "web"
      when: always

# before_script:
#   - rm -rf .terraform  
#   - terraform --version
#   - apk add aws-cli findutils make python3 py3-pip jq

stages:
  - set_env_variables
  - initialize
  - validate
  - plan
  - infracost
  - apply  

set_env_variables:
  stage: set_env_variables
  environment:    
    name: $ENV

  before_script:
  - rm -rf .terraform  
  - terraform --version
  - apk add aws-cli findutils make python3 py3-pip jq
  
  script:
    - cd $ENV_PROJECT_PATH 
    # Set environment name variable
    - export ENV_UPPERCASE=`echo "${ENV}" | tr '[a-z]' '[A-Z]'`
      
    # Set AWS credential variables
    - echo $IAM_ROLE
    - aws sts assume-role --role-arn "$IAM_ROLE" --role-session-name TF_Gitlab_ACCEESS --region us-east-1 >> creds.json   
    - export AWS_ACCESS_KEY_ID=$(jq -r '.Credentials.AccessKeyId' creds.json)  
    - export AWS_SECRET_ACCESS_KEY=$(jq -r '.Credentials.SecretAccessKey' creds.json)   
    - export AWS_SESSION_TOKEN=$(jq -r '.Credentials.SessionToken' creds.json)

    # Echo values into .env file, which will be saved as an artifact for subsequent jobs
    - echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> .env
    - echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> .env
    - echo "AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}" >> .env
    - cat .env
  artifacts:
    paths:
      - "./$ENV_PROJECT_PATH/.env"
    expire_in: 30 minutes

initialize:
  dependencies:
    - set_env_variables
  stage: initialize
  before_script:
  - rm -rf .terraform  
  - terraform --version
  - apk add aws-cli findutils make python3 py3-pip jq
  script:
    - cd $ENV_PROJECT_PATH 
    - export $(cat .env | xargs)
    - cat .env
    - ENV=${ENV} make init

validate:
  stage: validate
  dependencies:
    - set_env_variables
    - initialize
  before_script:
  - rm -rf .terraform  
  - terraform --version
  - apk add aws-cli findutils make python3 py3-pip jq
  script:
    - cd $ENV_PROJECT_PATH 
    - export $(cat .env | xargs)
    - ENV=${ENV} make validate

plan:
  stage: plan

  before_script:
  - rm -rf .terraform  
  - terraform --version
  - apk add aws-cli findutils make python3 py3-pip jq
  script:
    - cd $ENV_PROJECT_PATH 
    - export $(cat .env | xargs)
    #- ENV=${ENV} make plan >>  plan.json
    - ENV=${ENV} make plan

  dependencies:
    - set_env_variables
    - initialize
    - validate  
  when: manual

infracost:
  stage: infracost
  image:
    name: infracost/infracost:ci-0.10
    entrypoint: [""] 
  dependencies:
    - plan
  when: manual  
  script:
    - cd ./$ENV_PROJECT_PATH; cd environments/${ENV} 
    - echo "INFRACOST_API_KEY=ico-pXyHSooFPKX2CxeDLt9OSMhjHdxgGCTJ" >> .env
    # Clone the base branch of the pull request (e.g. main/master) into a temp directory.
    #- git clone $CI_REPOSITORY_URL --branch=master --single-branch /tmp/base
    # Generate an Infracost cost breakdown
    #- infracost breakdown --path=/tmp/base/LMS/${ENV_PROJECT_PATH}/${ENV} \ --format=json \ --out-file=infracost-base.json
    - infracost breakdown --path .
                             
apply:
  stage: apply
  before_script:
  - rm -rf .terraform  
  - terraform --version
  - apk add aws-cli findutils make python3 py3-pip jq
  script:
    - cd $ENV_PROJECT_PATH 
    - export $(cat .env | xargs)
    - pip install aws_lambda_typing boto3 requests
    - ENV=${ENV} make apply_auto_approve
  dependencies:
    - set_env_variables
    - initialize
    - validate  
    - plan  
  when: manual
